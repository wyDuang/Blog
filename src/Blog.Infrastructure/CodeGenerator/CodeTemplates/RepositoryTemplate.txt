using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Blog.Core.Entities;
using Blog.Core.Interfaces;
using Blog.Infrastructure.Database;
using Blog.Infrastructure.Extensions;
using Blog.Infrastructure.Resources;
using Blog.Infrastructure.Services;

namespace {RepositoryNamespace}
{
	/// <summary>
	/// {Comment}（仓储层实现）
	/// </summary>
    public class {ClassName}Repository : I{ClassName}Repository
    {
		private readonly MyContext _myContext;
        private readonly IPropertyMappingContainer _propertyMappingContainer;
        public {ClassName}Repository(
			MyContext myContext,
            IPropertyMappingContainer propertyMappingContainer)
        {
            _myContext = myContext;
            _propertyMappingContainer = propertyMappingContainer;
        }

		public async Task<PaginatedList<{ClassName}>> GetPageListAsync({ClassName}Parameters parm)
        {
			var query = _myContext.{TableName}.AsQueryable();

			//TODO: 条件


			query = query.ApplySort(parm.OrderBy, _propertyMappingContainer.Resolve<{ClassName}Resource, {ClassName}>());

			var count = await query.CountAsync();
			var data = await query
                .Skip(parm.PageIndex * parm.PageSize)
                .Take(parm.PageSize)
                .ToListAsync();

            return new PaginatedList<{ClassName}>(parm.PageIndex, parm.PageSize, count, data);
        }
    }
}